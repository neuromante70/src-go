{
    "sourceFile": "schoolGrade/main.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 61,
            "patches": [
                {
                    "date": 1689685830659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689702207763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \tid   int\n \tname string\n }\n \n-var students = map[int]student{}\n+var Students = map[int]student{}\n \n func studentExist(idStd int) (student, bool) {\n \tstudent, ok := students[idStd]\n \treturn student, ok\n"
                },
                {
                    "date": 1689702224654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n var Students = map[int]student{}\n \n func studentExist(idStd int) (student, bool) {\n-\tstudent, ok := students[idStd]\n+\tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n func addStudent(std student) bool {\n"
                },
                {
                    "date": 1689702230255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n \t}\n-\tstudents[std.id] = std\n+\tStudents[std.id] = std\n \tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n \treturn true\n }\n \n@@ -63,9 +63,9 @@\n \n func deleteStudent(idStd int) {\n \t_, ok := studentExist(idStd)\n \tif ok {\n-\t\tdelete(students, idStd)\n+\t\tdelete(Students, idStd)\n \t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n \t\treturn\n \t}\n \tfmt.Println(\"student non present, cannot delete it\")\n@@ -148,9 +148,9 @@\n }\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n-\tprt(\"student name:\", students[e.idStd].name)\n+\tprt(\"student name:\", Students[e.idStd].name)\n \tprt(\"subject:\", subjects.returnSbj(e.subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n@@ -232,10 +232,10 @@\n \texams[ex8.id] = ex8\n \texams[ex9.id] = ex9\n \tex1.extPrint()\n \tgrd, _ := avgGrade(1)\n-\tprt(\"the average of student\", students[1], \" is \", grd) // Carl grades average = 2.75\n+\tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n \tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n \tgrd, _ = avgGrade(2)\n-\tprt(\"the average of student\", students[2], \" is \", grd) // Carl grades average = 2.75\n+\tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n \tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n }\n"
                },
                {
                    "date": 1689702287323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func addStudent(std student) bool {\n+func addStudent(std student) (bool {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n"
                },
                {
                    "date": 1689702295323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func addStudent(std student) (bool {\n+func addStudent(std student) (inserted bool) {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n"
                },
                {
                    "date": 1689702315115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n func addStudent(std student) (inserted bool) {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n-\t\treturn false\n+\t\treturn insfalse\n \t}\n \tStudents[std.id] = std\n \tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n \treturn true\n"
                },
                {
                    "date": 1689702326276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,13 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func addStudent(std student) (inserted bool) {\n+func addStudent(std student) bool {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n-\t\treturn insfalse\n+\t\treturn false\n \t}\n \tStudents[std.id] = std\n \tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n \treturn true\n"
                },
                {
                    "date": 1689702399350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func addStudent(std student) bool {\n+func AddStudent(std student) bool {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n"
                },
                {
                    "date": 1689702407478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,17 @@\n \tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n \treturn true\n }\n \n-func findStudent(idStd int) (student, error) {\n+func FindStudent(idStd int) (student, error) {\n \tstd, exists := studentExist(idStd)\n \tif exists {\n \t\treturn std, nil\n \t}\n \treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n }\n \n-func deleteStudent(idStd int) {\n+func DeleteStudent(idStd int) {\n \t_, ok := studentExist(idStd)\n \tif ok {\n \t\tdelete(Students, idStd)\n \t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n"
                },
                {
                    "date": 1689702414473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n \n // 2. Create constants for subjects such as english, math, science and history\n type subject int\n \n-var subjects subject\n+var Subjects subject\n \n const (\n \tenglish     subject = iota // 0\n \tmathematics                // 1\n"
                },
                {
                    "date": 1689702419759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \tscience                    // 2\n \thistory                    // 3\n )\n \n-func (s subject) returnSbj(idSub int) string {\n+func (s ubject) returnSbj(idSub int) string {\n \tswitch idSub {\n \tcase 0:\n \t\treturn \"english\"\n \tcase 1:\n"
                },
                {
                    "date": 1689702433580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \tscience                    // 2\n \thistory                    // 3\n )\n \n-func (s ubject) returnSbj(idSub int) string {\n+func (s subject) returnSbj(idSub int) string {\n \tswitch idSub {\n \tcase 0:\n \t\treturn \"english\"\n \tcase 1:\n"
                },
                {
                    "date": 1689702459419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func AddStudent(std student) bool {\n+func ()AddStudent(std student) bool {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n"
                },
                {
                    "date": 1689702472407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n-func ()AddStudent(std student) bool {\n+func (s student) AddStudent(std student) bool {\n \t_, exist := studentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n@@ -52,9 +52,9 @@\n \tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n \treturn true\n }\n \n-func FindStudent(idStd int) (student, error) {\n+func (s student) FindStudent(idStd int) (student, error) {\n \tstd, exists := studentExist(idStd)\n \tif exists {\n \t\treturn std, nil\n \t}\n"
                },
                {
                    "date": 1689702492041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \t}\n \treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n }\n \n-func DeleteStudent(idStd int) {\n+func (s student) DeleteStudent(idStd int) {\n \t_, ok := studentExist(idStd)\n \tif ok {\n \t\tdelete(Students, idStd)\n \t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n@@ -154,9 +154,9 @@\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n-func avgGrade(idStd int) (avg int, err error) {\n+func (s student) avgGrade(idStd int) (avg int, err error) {\n \tvar sum int\n \ti := 1\n \tfor k := range exams {\n \t\tif k == idStd {\n"
                },
                {
                    "date": 1689702507841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n \treturn avg, nil\n }\n \n // 3. Get average score for a particular subject for a student id\n-func avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n+func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n \tvar sum int\n \ti := 1\n \tfor k, v := range exams {\n \t\tif k == idStd {\n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\taddStudent(s1)\n+\tAddStudent(s1)\n \taddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n"
                },
                {
                    "date": 1689702527211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,10 +194,10 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\tAddStudent(s1)\n-\taddStudent(s2)\n+\ts1.AddStudent(s1)\n+\tAddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n \tif err != nil {\n"
                },
                {
                    "date": 1689702663482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \tid   int\n \tname string\n }\n \n-var Students = map[int]student{}\n+var (s student) Students = map[int]student{}\n \n func studentExist(idStd int) (student, bool) {\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n"
                },
                {
                    "date": 1689702670090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,11 +34,11 @@\n \tid   int\n \tname string\n }\n \n-var (s student) Students = map[int]student{}\n+var Students = map[int]student{}\n \n-func studentExist(idStd int) (student, bool) {\n+func (s student) studentExist(idStd int) (student, bool) {\n \tstudent, ok := Students[idStd]\n \treturn student, ok\n }\n \n"
                },
                {
                    "date": 1689702678473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,241 @@\n+package main\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"strconv\"\n+)\n+\n+var prt = fmt.Println\n+\n+/*\n+We will build a school grade treacking service\n+\n+Concepts and models to create in your program\n+1. Create a student that will have an id ansum / i\n+3. Delete student by ID\n+\n+Functionalities for grades\n+1. Add a grade for a student\n+2. Get the average score across all subjects for a student id\n+3. Get average score for a particular subject for a student id\n+4. Get the subject with the lowest score for a student id\n+5. Get the subject with the highest score for a student id\n+6. Get all grades for a student id\n+\n+\n+Hint: You will have 2 maps in this exercise\n+\n+*/\n+\n+// 1. Create a student that will have an id and name as the fields - id is int and name is string\n+type student struct {\n+\tid   int\n+\tname string\n+}\n+\n+var Students = map[int]student{}\n+\n+func (s student) StudentExist(idStd int) (student, bool) {\n+\tstudent, ok := Students[idStd]\n+\treturn student, ok\n+}\n+\n+func (s student) AddStudent(std student) bool {\n+\t_, exist := StudentExist(std.id)\n+\tif exist {\n+\t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n+\t\treturn false\n+\t}\n+\tStudents[std.id] = std\n+\tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n+\treturn true\n+}\n+\n+func (s student) FindStudent(idStd int) (student, error) {\n+\tstd, exists := studentExist(idStd)\n+\tif exists {\n+\t\treturn std, nil\n+\t}\n+\treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n+}\n+\n+func (s student) DeleteStudent(idStd int) {\n+\t_, ok := studentExist(idStd)\n+\tif ok {\n+\t\tdelete(Students, idStd)\n+\t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n+\t\treturn\n+\t}\n+\tfmt.Println(\"student non present, cannot delete it\")\n+}\n+\n+// 2. Create constants for subjects such as english, math, science and history\n+type subject int\n+\n+var Subjects subject\n+\n+const (\n+\tenglish     subject = iota // 0\n+\tmathematics                // 1\n+\tscience                    // 2\n+\thistory                    // 3\n+)\n+\n+func (s subject) returnSbj(idSub int) string {\n+\tswitch idSub {\n+\tcase 0:\n+\t\treturn \"english\"\n+\tcase 1:\n+\t\treturn \"math\"\n+\tcase 2:\n+\t\treturn \"science\"\n+\tcase 3:\n+\t\treturn \"history\"\n+\tdefault:\n+\t\treturn \"not found\"\n+\t}\n+\t// return [...]string{\"english\", \"math\", \"science\", \"history\"}\n+}\n+\n+// 3. Create a grade struct that will hold a subject name string and an integer score denoting the 'marks'\n+type exam struct {\n+\tid      int // exam number\n+\tidStd   int // student id\n+\tsubject int // exam subject\n+\tgrade   int // exam grade\n+}\n+\n+var exams = map[int]exam{} // [int] is the exam number\n+\n+// A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\n+type grade int\n+\n+var grades grade\n+\n+// Here I decided to use the six-point system adopted by Phillips Academy at Andover.\n+const (\n+\tFailure              grade = iota // 0\n+\tLowFailure                        // 1\n+\tLowPassButCertifying              // 2\n+\tSatisfactory                      // 3\n+\tGood                              // 4\n+\tSuperiorHonor                     // 5\n+\tOutstandingHighHonor              // 6\n+)\n+\n+// func (g Grades) string() {\n+func (g grade) returnGrade(idGrade int) string {\n+\tswitch idGrade {\n+\tcase 0:\n+\t\treturn \"Failure\"\n+\tcase 1:\n+\t\treturn \"Low Failure\"\n+\tcase 2:\n+\t\treturn \"Low Pass, but certifying\"\n+\tcase 3:\n+\t\treturn \"Satisfactory\"\n+\tcase 4:\n+\t\treturn \"Good\"\n+\tcase 5:\n+\t\treturn \"Superior (Honor)\"\n+\tcase 6:\n+\t\treturn \"Outstanding (High Honor)\"\n+\tdefault:\n+\t\treturn \"not found\"\n+\t}\n+}\n+\n+func (e exam) extPrint() { //extended print\n+\tprt(\"id exam:\", e.id)\n+\tprt(\"student name:\", Students[e.idStd].name)\n+\tprt(\"subject:\", subjects.returnSbj(e.subject))\n+\tprt(\"grade:\", grades.returnGrade(e.grade))\n+}\n+\n+// 2. Get the average score across all subjects for a student id\n+func (s student) avgGrade(idStd int) (avg int, err error) {\n+\tvar sum int\n+\ti := 1\n+\tfor k := range exams {\n+\t\tif k == idStd {\n+\t\t\tsum = sum + exams[k].grade\n+\t\t\ti++\n+\t\t}\n+\t}\n+\tif i == 0 {\n+\t\treturn 0, errors.New(\"exams found for this student\")\n+\t}\n+\tavg = int(math.Floor(float64(sum) / float64(i)))\n+\treturn avg, nil\n+}\n+\n+// 3. Get average score for a particular subject for a student id\n+func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n+\tvar sum int\n+\ti := 1\n+\tfor k, v := range exams {\n+\t\tif k == idStd {\n+\t\t\tif v.subject == sbj {\n+\t\t\t\tsum = sum + v.grade\n+\t\t\t\ti++\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif i == 0 {\n+\t\treturn 0, errors.New(\"exams found for this matter\")\n+\t}\n+\tavg = sum / i\n+\treturn avg, nil\n+}\n+\n+func main() {\n+\ts1 := student{1, \"Carl\"}\n+\ts2 := student{2, \"Janis\"}\n+\ts3 := student{3, \"Luise\"}\n+\ts4 := student{4, \"John\"}\n+\ts1.AddStudent(s1)\n+\tAddStudent(s2)\n+\taddStudent(s3)\n+\taddStudent(s4)\n+\t_, err := findStudent(s4.id)\n+\tif err != nil {\n+\t\tfmt.Println(err.Error())\n+\t} else {\n+\t\tfmt.Println(s4.name, \"present in database\")\n+\t}\n+\tdeleteStudent(s4.id)\n+\n+\tex1 := exam{\n+\t\tid:      1,            // exam number\n+\t\tidStd:   1,            // Carl\n+\t\tsubject: int(science), // science\n+\t\tgrade:   int(Good),    // good (4)\n+\t}\n+\tex4 := exam{4, 1, 1, 1} // exNr 4, Carl, math, low failure\n+\tex5 := exam{5, 1, 1, 3} // exNr 5, Carl, math, satisfactory\n+\tex6 := exam{6, 1, 0, 3} // exNr 5, Carl, english, satisfactory\n+\tex2 := exam{2, 2, 1, 5} // exNr 2, Janis, math, superior\n+\tex7 := exam{7, 2, 2, 4} // exNr 7, Janis, science, good\n+\tex8 := exam{8, 2, 2, 2} // exNr 8, Janis, science, low pass but certifying\n+\tex3 := exam{3, 3, 3, 6} // exNr 3, Luise, history, outstanding\n+\tex9 := exam{9, 3, 0, 2} // exNr 3, Luise, english, low pass but certifying\n+\n+\texams[ex1.id] = ex1\n+\texams[ex2.id] = ex2\n+\texams[ex3.id] = ex3\n+\texams[ex4.id] = ex4\n+\texams[ex5.id] = ex5\n+\texams[ex6.id] = ex6\n+\texams[ex7.id] = ex7\n+\texams[ex8.id] = ex8\n+\texams[ex9.id] = ex9\n+\tex1.extPrint()\n+\tgrd, _ := avgGrade(1)\n+\tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n+\tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n+\tgrd, _ = avgGrade(2)\n+\tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n+\tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n+}\n"
                },
                {
                    "date": 1689702685414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \treturn student, ok\n }\n \n func (s student) AddStudent(std student) bool {\n-\t_, exist := StudentExist(std.id)\n+\t_, exist := s.StudentExist(std.id)\n \tif exist {\n \t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n \t\treturn false\n \t}\n@@ -238,245 +238,4 @@\n \tgrd, _ = avgGrade(2)\n \tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n \tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n }\n-package main\n-\n-import (\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"math\"\n-\t\"strconv\"\n-)\n-\n-var prt = fmt.Println\n-\n-/*\n-We will build a school grade treacking service\n-\n-Concepts and models to create in your program\n-1. Create a student that will have an id ansum / i\n-3. Delete student by ID\n-\n-Functionalities for grades\n-1. Add a grade for a student\n-2. Get the average score across all subjects for a student id\n-3. Get average score for a particular subject for a student id\n-4. Get the subject with the lowest score for a student id\n-5. Get the subject with the highest score for a student id\n-6. Get all grades for a student id\n-\n-\n-Hint: You will have 2 maps in this exercise\n-\n-*/\n-\n-// 1. Create a student that will have an id and name as the fields - id is int and name is string\n-type student struct {\n-\tid   int\n-\tname string\n-}\n-\n-var Students = map[int]student{}\n-\n-func (s student) studentExist(idStd int) (student, bool) {\n-\tstudent, ok := Students[idStd]\n-\treturn student, ok\n-}\n-\n-func (s student) AddStudent(std student) bool {\n-\t_, exist := studentExist(std.id)\n-\tif exist {\n-\t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n-\t\treturn false\n-\t}\n-\tStudents[std.id] = std\n-\tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n-\treturn true\n-}\n-\n-func (s student) FindStudent(idStd int) (student, error) {\n-\tstd, exists := studentExist(idStd)\n-\tif exists {\n-\t\treturn std, nil\n-\t}\n-\treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n-}\n-\n-func (s student) DeleteStudent(idStd int) {\n-\t_, ok := studentExist(idStd)\n-\tif ok {\n-\t\tdelete(Students, idStd)\n-\t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n-\t\treturn\n-\t}\n-\tfmt.Println(\"student non present, cannot delete it\")\n-}\n-\n-// 2. Create constants for subjects such as english, math, science and history\n-type subject int\n-\n-var Subjects subject\n-\n-const (\n-\tenglish     subject = iota // 0\n-\tmathematics                // 1\n-\tscience                    // 2\n-\thistory                    // 3\n-)\n-\n-func (s subject) returnSbj(idSub int) string {\n-\tswitch idSub {\n-\tcase 0:\n-\t\treturn \"english\"\n-\tcase 1:\n-\t\treturn \"math\"\n-\tcase 2:\n-\t\treturn \"science\"\n-\tcase 3:\n-\t\treturn \"history\"\n-\tdefault:\n-\t\treturn \"not found\"\n-\t}\n-\t// return [...]string{\"english\", \"math\", \"science\", \"history\"}\n-}\n-\n-// 3. Create a grade struct that will hold a subject name string and an integer score denoting the 'marks'\n-type exam struct {\n-\tid      int // exam number\n-\tidStd   int // student id\n-\tsubject int // exam subject\n-\tgrade   int // exam grade\n-}\n-\n-var exams = map[int]exam{} // [int] is the exam number\n-\n-// A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\n-type grade int\n-\n-var grades grade\n-\n-// Here I decided to use the six-point system adopted by Phillips Academy at Andover.\n-const (\n-\tFailure              grade = iota // 0\n-\tLowFailure                        // 1\n-\tLowPassButCertifying              // 2\n-\tSatisfactory                      // 3\n-\tGood                              // 4\n-\tSuperiorHonor                     // 5\n-\tOutstandingHighHonor              // 6\n-)\n-\n-// func (g Grades) string() {\n-func (g grade) returnGrade(idGrade int) string {\n-\tswitch idGrade {\n-\tcase 0:\n-\t\treturn \"Failure\"\n-\tcase 1:\n-\t\treturn \"Low Failure\"\n-\tcase 2:\n-\t\treturn \"Low Pass, but certifying\"\n-\tcase 3:\n-\t\treturn \"Satisfactory\"\n-\tcase 4:\n-\t\treturn \"Good\"\n-\tcase 5:\n-\t\treturn \"Superior (Honor)\"\n-\tcase 6:\n-\t\treturn \"Outstanding (High Honor)\"\n-\tdefault:\n-\t\treturn \"not found\"\n-\t}\n-}\n-\n-func (e exam) extPrint() { //extended print\n-\tprt(\"id exam:\", e.id)\n-\tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subjects.returnSbj(e.subject))\n-\tprt(\"grade:\", grades.returnGrade(e.grade))\n-}\n-\n-// 2. Get the average score across all subjects for a student id\n-func (s student) avgGrade(idStd int) (avg int, err error) {\n-\tvar sum int\n-\ti := 1\n-\tfor k := range exams {\n-\t\tif k == idStd {\n-\t\t\tsum = sum + exams[k].grade\n-\t\t\ti++\n-\t\t}\n-\t}\n-\tif i == 0 {\n-\t\treturn 0, errors.New(\"exams found for this student\")\n-\t}\n-\tavg = int(math.Floor(float64(sum) / float64(i)))\n-\treturn avg, nil\n-}\n-\n-// 3. Get average score for a particular subject for a student id\n-func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n-\tvar sum int\n-\ti := 1\n-\tfor k, v := range exams {\n-\t\tif k == idStd {\n-\t\t\tif v.subject == sbj {\n-\t\t\t\tsum = sum + v.grade\n-\t\t\t\ti++\n-\t\t\t}\n-\t\t}\n-\t}\n-\tif i == 0 {\n-\t\treturn 0, errors.New(\"exams found for this matter\")\n-\t}\n-\tavg = sum / i\n-\treturn avg, nil\n-}\n-\n-func main() {\n-\ts1 := student{1, \"Carl\"}\n-\ts2 := student{2, \"Janis\"}\n-\ts3 := student{3, \"Luise\"}\n-\ts4 := student{4, \"John\"}\n-\ts1.AddStudent(s1)\n-\tAddStudent(s2)\n-\taddStudent(s3)\n-\taddStudent(s4)\n-\t_, err := findStudent(s4.id)\n-\tif err != nil {\n-\t\tfmt.Println(err.Error())\n-\t} else {\n-\t\tfmt.Println(s4.name, \"present in database\")\n-\t}\n-\tdeleteStudent(s4.id)\n-\n-\tex1 := exam{\n-\t\tid:      1,            // exam number\n-\t\tidStd:   1,            // Carl\n-\t\tsubject: int(science), // science\n-\t\tgrade:   int(Good),    // good (4)\n-\t}\n-\tex4 := exam{4, 1, 1, 1} // exNr 4, Carl, math, low failure\n-\tex5 := exam{5, 1, 1, 3} // exNr 5, Carl, math, satisfactory\n-\tex6 := exam{6, 1, 0, 3} // exNr 5, Carl, english, satisfactory\n-\tex2 := exam{2, 2, 1, 5} // exNr 2, Janis, math, superior\n-\tex7 := exam{7, 2, 2, 4} // exNr 7, Janis, science, good\n-\tex8 := exam{8, 2, 2, 2} // exNr 8, Janis, science, low pass but certifying\n-\tex3 := exam{3, 3, 3, 6} // exNr 3, Luise, history, outstanding\n-\tex9 := exam{9, 3, 0, 2} // exNr 3, Luise, english, low pass but certifying\n-\n-\texams[ex1.id] = ex1\n-\texams[ex2.id] = ex2\n-\texams[ex3.id] = ex3\n-\texams[ex4.id] = ex4\n-\texams[ex5.id] = ex5\n-\texams[ex6.id] = ex6\n-\texams[ex7.id] = ex7\n-\texams[ex8.id] = ex8\n-\texams[ex9.id] = ex9\n-\tex1.extPrint()\n-\tgrd, _ := avgGrade(1)\n-\tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n-\tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n-\tgrd, _ = avgGrade(2)\n-\tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n-\tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n-}\n"
                },
                {
                    "date": 1689702691356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \treturn true\n }\n \n func (s student) FindStudent(idStd int) (student, error) {\n-\tstd, exists := studentExist(idStd)\n+\tstd, exists := s.StudentExist(idStd)\n \tif exists {\n \t\treturn std, nil\n \t}\n \treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n"
                },
                {
                    "date": 1689702708685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n }\n \n func (s student) DeleteStudent(idStd int) {\n-\t_, ok := studentExist(idStd)\n+\t_, ok := s.StudentExist(idStd)\n \tif ok {\n \t\tdelete(Students, idStd)\n \t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n \t\treturn\n@@ -106,9 +106,9 @@\n \tsubject int // exam subject\n \tgrade   int // exam grade\n }\n \n-var exams = map[int]exam{} // [int] is the exam number\n+var Exams = map[int]exam{} // [int] is the exam number\n \n // A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\n type grade int\n \n"
                },
                {
                    "date": 1689702729395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n \n // A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\n type grade int\n \n-var grades grade\n+var Grades grade\n \n // Here I decided to use the six-point system adopted by Phillips Academy at Andover.\n const (\n \tFailure              grade = iota // 0\n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subjects.returnSbj(e.subject))\n+\tprt(\"subject:\", e.subjects.returnSbj(e.subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689702736358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", e.subjects.returnSbj(e.subject))\n+\tprt(\"subject:\", e.subject.returnSbj(e.subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689702753548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n \tOutstandingHighHonor              // 6\n )\n \n // func (g Grades) string() {\n-func (g grade) returnGrade(idGrade int) string {\n+func (s student) returnGrade(idGrade int) string {\n \tswitch idGrade {\n \tcase 0:\n \t\treturn \"Failure\"\n \tcase 1:\n"
                },
                {
                    "date": 1689702779901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n \tvar sum int\n \ti := 1\n-\tfor k := range exams {\n+\tfor k := range Exams {\n \t\tif k == idStd {\n \t\t\tsum = sum + exams[k].grade\n \t\t\ti++\n \t\t}\n"
                },
                {
                    "date": 1689702785309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n \tvar sum int\n \ti := 1\n \tfor k := range Exams {\n \t\tif k == idStd {\n-\t\t\tsum = sum + exams[k].grade\n+\t\t\tsum = sum + Exams[k].grade\n \t\t\ti++\n \t\t}\n \t}\n \tif i == 0 {\n"
                },
                {
                    "date": 1689702790734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n // 3. Get average score for a particular subject for a student id\n func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n \tvar sum int\n \ti := 1\n-\tfor k, v := range exams {\n+\tfor k, v := range Eexams {\n \t\tif k == idStd {\n \t\t\tif v.subject == sbj {\n \t\t\t\tsum = sum + v.grade\n \t\t\t\ti++\n"
                },
                {
                    "date": 1689702801703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n // 3. Get average score for a particular subject for a student id\n func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n \tvar sum int\n \ti := 1\n-\tfor k, v := range Eexams {\n+\tfor k, v := range Exams {\n \t\tif k == idStd {\n \t\t\tif v.subject == sbj {\n \t\t\t\tsum = sum + v.grade\n \t\t\t\ti++\n@@ -195,9 +195,9 @@\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n \ts1.AddStudent(s1)\n-\tAddStudent(s2)\n+\ts2.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n \tif err != nil {\n"
                },
                {
                    "date": 1689702831777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\ts1.AddStudent(s1)\n+\tStu.AddStudent(s1)\n \ts2.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n"
                },
                {
                    "date": 1689702838033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\tStu.AddStudent(s1)\n+\tStudents..AddStudent(s1)\n \ts2.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n"
                },
                {
                    "date": 1689702843484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\tStudents..AddStudent(s1)\n+\tStudents.AddStudent(s1)\n \ts2.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n"
                },
                {
                    "date": 1689702856796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\tStudents.AddStudent(s1)\n+\tstudent.AddStudent(s1)\n \ts2.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n"
                },
                {
                    "date": 1689702863129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n \tstudent.AddStudent(s1)\n-\ts2.AddStudent(s2)\n+\tstudent.AddStudent(s2)\n \taddStudent(s3)\n \taddStudent(s4)\n \t_, err := findStudent(s4.id)\n \tif err != nil {\n"
                },
                {
                    "date": 1689702868556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,10 +196,10 @@\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n \tstudent.AddStudent(s1)\n \tstudent.AddStudent(s2)\n-\taddStudent(s3)\n-\taddStudent(s4)\n+\tAddStudent(s3)\n+\tAddStudent(s4)\n \t_, err := findStudent(s4.id)\n \tif err != nil {\n \t\tfmt.Println(err.Error())\n \t} else {\n"
                },
                {
                    "date": 1689702875010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n \tstudent.AddStudent(s1)\n \tstudent.AddStudent(s2)\n-\tAddStudent(s3)\n+\ts3.AddStudent(s3)\n \tAddStudent(s4)\n \t_, err := findStudent(s4.id)\n \tif err != nil {\n \t\tfmt.Println(err.Error())\n"
                },
                {
                    "date": 1689702887057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,10 +197,10 @@\n \ts4 := student{4, \"John\"}\n \tstudent.AddStudent(s1)\n \tstudent.AddStudent(s2)\n \ts3.AddStudent(s3)\n-\tAddStudent(s4)\n-\t_, err := findStudent(s4.id)\n+\ts3.AddStudent(s4)\n+\t_, err := student.FindStudent(s4.id)\n \tif err != nil {\n \t\tfmt.Println(err.Error())\n \t} else {\n \t\tfmt.Println(s4.name, \"present in database\")\n"
                },
                {
                    "date": 1689702894001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n \t\tfmt.Println(err.Error())\n \t} else {\n \t\tfmt.Println(s4.name, \"present in database\")\n \t}\n-\tdeleteStudent(s4.id)\n+\tsdeleteStudent(s4.id)\n \n \tex1 := exam{\n \t\tid:      1,            // exam number\n \t\tidStd:   1,            // Carl\n"
                },
                {
                    "date": 1689702911866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n \ts1 := student{1, \"Carl\"}\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n-\tstudent.AddStudent(s1)\n+\ts1.AddStudent(s1)\n \tstudent.AddStudent(s2)\n \ts3.AddStudent(s3)\n \ts3.AddStudent(s4)\n \t_, err := student.FindStudent(s4.id)\n@@ -204,9 +204,9 @@\n \t\tfmt.Println(err.Error())\n \t} else {\n \t\tfmt.Println(s4.name, \"present in database\")\n \t}\n-\tsdeleteStudent(s4.id)\n+\ts4.DeleteStudent(s4.id)\n \n \tex1 := exam{\n \t\tid:      1,            // exam number\n \t\tidStd:   1,            // Carl\n"
                },
                {
                    "date": 1689702958827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,12 +195,12 @@\n \ts2 := student{2, \"Janis\"}\n \ts3 := student{3, \"Luise\"}\n \ts4 := student{4, \"John\"}\n \ts1.AddStudent(s1)\n-\tstudent.AddStudent(s2)\n+\ts2.AddStudent(s2)\n \ts3.AddStudent(s3)\n \ts3.AddStudent(s4)\n-\t_, err := student.FindStudent(s4.id)\n+\t_, err := s4.FindStudent(s4.id)\n \tif err != nil {\n \t\tfmt.Println(err.Error())\n \t} else {\n \t\tfmt.Println(s4.name, \"present in database\")\n"
                },
                {
                    "date": 1689702979310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", e.subject.returnSbj(e.subject))\n+\tprt(\"subject:\", subject.returnSbj(e.subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689702985905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.returnSbj(e.subject))\n+\tprt(\"subject:\", subject.returnSbj(subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689702999293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n \tprt(\"subject:\", subject.returnSbj(subject))\n-\tprt(\"grade:\", grades.returnGrade(e.grade))\n+\tprt(\"grade:\", grades.ReturnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n"
                },
                {
                    "date": 1689703004896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n \tprt(\"subject:\", subject.returnSbj(subject))\n-\tprt(\"grade:\", grades.ReturnGrade(e.grade))\n+\tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n"
                },
                {
                    "date": 1689703012181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \tscience                    // 2\n \thistory                    // 3\n )\n \n-func (s subject) returnSbj(idSub int) string {\n+func (s subject) eturnSbj(idSub int) string {\n \tswitch idSub {\n \tcase 0:\n \t\treturn \"english\"\n \tcase 1:\n"
                },
                {
                    "date": 1689703023952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \tscience                    // 2\n \thistory                    // 3\n )\n \n-func (s subject) eturnSbj(idSub int) string {\n+func (s subject) ReturnSbj(idSub int) string {\n \tswitch idSub {\n \tcase 0:\n \t\treturn \"english\"\n \tcase 1:\n@@ -125,9 +125,9 @@\n \tOutstandingHighHonor              // 6\n )\n \n // func (g Grades) string() {\n-func (s student) returnGrade(idGrade int) string {\n+func (s student) ReturnGrade(idGrade int) string {\n \tswitch idGrade {\n \tcase 0:\n \t\treturn \"Failure\"\n \tcase 1:\n"
                },
                {
                    "date": 1689703042096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,9 @@\n \texams[ex7.id] = ex7\n \texams[ex8.id] = ex8\n \texams[ex9.id] = ex9\n \tex1.extPrint()\n-\tgrd, _ := avgGrade(1)\n+\tgrd, _ := AvgGrade(1)\n \tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n \tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n \tgrd, _ = avgGrade(2)\n \tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n"
                },
                {
                    "date": 1689703047324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n \texams[ex9.id] = ex9\n \tex1.extPrint()\n \tgrd, _ := AvgGrade(1)\n \tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n-\tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n+\tprt(AvgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n \tgrd, _ = avgGrade(2)\n \tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n \tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n }\n"
                },
                {
                    "date": 1689703054682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,8 +234,8 @@\n \tex1.extPrint()\n \tgrd, _ := AvgGrade(1)\n \tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n \tprt(AvgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n-\tgrd, _ = avgGrade(2)\n+\tgrd, _ = AvgGrade(2)\n \tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n-\tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n+\tprt(AvgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n }\n"
                },
                {
                    "date": 1689703084162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.returnSbj(subject))\n+\tprt(\"subject:\", subject.ReturnSbj(subject))\n \tprt(\"grade:\", grades.returnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689703096294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n \tprt(\"subject:\", subject.ReturnSbj(subject))\n-\tprt(\"grade:\", grades.returnGrade(e.grade))\n+\tprt(\"grade:\", student.ReturnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n"
                },
                {
                    "date": 1689703121868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.ReturnSbj(subject))\n+\tprt(\"subject:\", subject.ReturnSbj(Subject))\n \tprt(\"grade:\", student.ReturnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689703173421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.ReturnSbj(Subject))\n+\tprt(\"subject:\", subject.ReturnSbj(subjects))\n \tprt(\"grade:\", student.ReturnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689703183885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.ReturnSbj(subjects))\n+\tprt(\"subject:\", subject.ReturnSbj(subject)\n \tprt(\"grade:\", student.ReturnGrade(e.grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689703242504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,10 +149,10 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.ReturnSbj(subject)\n-\tprt(\"grade:\", student.ReturnGrade(e.grade))\n+\tprt(\"subject:\", subject.ReturnSbj(subject))\n+\tprt(\"grade:\", student.ReturnGrade(grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n"
                },
                {
                    "date": 1689703281889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n \n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n-\tprt(\"subject:\", subject.ReturnSbj(subject))\n+\tprt(\"subject:\", e.subject.ReturnSbj(subject))\n \tprt(\"grade:\", student.ReturnGrade(grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n"
                },
                {
                    "date": 1689703307658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \tscience                    // 2\n \thistory                    // 3\n )\n \n-func (s subject) ReturnSbj(idSub int) string {\n+func ReturnSbj(idSub int) string {\n \tswitch idSub {\n \tcase 0:\n \t\treturn \"english\"\n \tcase 1:\n"
                },
                {
                    "date": 1689703314092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n \tOutstandingHighHonor              // 6\n )\n \n // func (g Grades) string() {\n-func (s student) ReturnGrade(idGrade int) string {\n+func ReturnGrade(idGrade int) string {\n \tswitch idGrade {\n \tcase 0:\n \t\treturn \"Failure\"\n \tcase 1:\n"
                },
                {
                    "date": 1689703320895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n func (e exam) extPrint() { //extended print\n \tprt(\"id exam:\", e.id)\n \tprt(\"student name:\", Students[e.idStd].name)\n \tprt(\"subject:\",ReturnSbj(subject))\n-\tprt(\"grade:\", student.ReturnGrade(grade))\n+\tprt(\"grade:\", ReturnGrade(grade))\n }\n \n // 2. Get the average score across all subjects for a student id\n func (s student) avgGrade(idStd int) (avg int, err error) {\n"
                },
                {
                    "date": 1689703440055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,241 @@\n+package main\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"strconv\"\n+)\n+\n+var prt = fmt.Println\n+\n+/*\n+We will build a school grade treacking service\n+\n+Concepts and models to create in your program\n+1. Create a student that will have an id ansum / i\n+3. Delete student by ID\n+\n+Functionalities for grades\n+1. Add a grade for a student\n+2. Get the average score across all subjects for a student id\n+3. Get average score for a particular subject for a student id\n+4. Get the subject with the lowest score for a student id\n+5. Get the subject with the highest score for a student id\n+6. Get all grades for a student id\n+\n+\n+Hint: You will have 2 maps in this exercise\n+\n+*/\n+\n+// 1. Create a student that will have an id and name as the fields - id is int and name is string\n+type student struct {\n+\tid   int\n+\tname string\n+}\n+\n+var Students = map[int]student{}\n+\n+func (s student) StudentExist(idStd int) (student, bool) {\n+\tstudent, ok := Students[idStd]\n+\treturn student, ok\n+}\n+\n+func (s student) AddStudent(std student) bool {\n+\t_, exist := s.StudentExist(std.id)\n+\tif exist {\n+\t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n+\t\treturn false\n+\t}\n+\tStudents[std.id] = std\n+\tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n+\treturn true\n+}\n+\n+func (s student) FindStudent(idStd int) (student, error) {\n+\tstd, exists := s.StudentExist(idStd)\n+\tif exists {\n+\t\treturn std, nil\n+\t}\n+\treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n+}\n+\n+func (s student) DeleteStudent(idStd int) {\n+\t_, ok := s.StudentExist(idStd)\n+\tif ok {\n+\t\tdelete(Students, idStd)\n+\t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n+\t\treturn\n+\t}\n+\tfmt.Println(\"student non present, cannot delete it\")\n+}\n+\n+// 2. Create constants for subjects such as english, math, science and history\n+type subject int\n+\n+var Subjects subject\n+\n+const (\n+\tenglish     subject = iota // 0\n+\tmathematics                // 1\n+\tscience                    // 2\n+\thistory                    // 3\n+)\n+\n+func ReturnSbj(idSub int) string {\n+\tswitch idSub {\n+\tcase 0:\n+\t\treturn \"english\"\n+\tcase 1:\n+\t\treturn \"math\"\n+\tcase 2:\n+\t\treturn \"science\"\n+\tcase 3:\n+\t\treturn \"history\"\n+\tdefault:\n+\t\treturn \"not found\"\n+\t}\n+\t// return [...]string{\"english\", \"math\", \"science\", \"history\"}\n+}\n+\n+// 3. Create a grade struct that will hold a subject name string and an integer score denoting the 'marks'\n+type exam struct {\n+\tid      int // exam number\n+\tidStd   int // student id\n+\tsubject int // exam subject\n+\tgrade   int // exam grade\n+}\n+\n+var Exams = map[int]exam{} // [int] is the exam number\n+\n+// A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\n+type grade int\n+\n+var Grades grade\n+\n+// Here I decided to use the six-point system adopted by Phillips Academy at Andover.\n+const (\n+\tFailure              grade = iota // 0\n+\tLowFailure                        // 1\n+\tLowPassButCertifying              // 2\n+\tSatisfactory                      // 3\n+\tGood                              // 4\n+\tSuperiorHonor                     // 5\n+\tOutstandingHighHonor              // 6\n+)\n+\n+// func (g Grades) string() {\n+func ReturnGrade(idGrade int) string {\n+\tswitch idGrade {\n+\tcase 0:\n+\t\treturn \"Failure\"\n+\tcase 1:\n+\t\treturn \"Low Failure\"\n+\tcase 2:\n+\t\treturn \"Low Pass, but certifying\"\n+\tcase 3:\n+\t\treturn \"Satisfactory\"\n+\tcase 4:\n+\t\treturn \"Good\"\n+\tcase 5:\n+\t\treturn \"Superior (Honor)\"\n+\tcase 6:\n+\t\treturn \"Outstanding (High Honor)\"\n+\tdefault:\n+\t\treturn \"not found\"\n+\t}\n+}\n+\n+func (e exam) extPrint() { //extended print\n+\tprt(\"id exam:\", e.id)\n+\tprt(\"student name:\", Students[e.idStd].name)\n+\tprt(\"subject:\",ReturnSbj(e.subject))\n+\tprt(\"grade:\", ReturnGrade(e.grade))\n+}\n+\n+// 2. Get the average score across all subjects for a student id\n+func (s student) avgGrade() (avg int, err error) {\n+\tvar sum int\n+\ti := 1\n+\tfor k := range Exams {\n+\t\tif k == s.idStd {\n+\t\t\tsum = sum + Exams[k].grade\n+\t\t\ti++\n+\t\t}\n+\t}\n+\tif i == 0 {\n+\t\treturn 0, errors.New(\"exams found for this student\")\n+\t}\n+\tavg = int(math.Floor(float64(sum) / float64(i)))\n+\treturn avg, nil\n+}\n+\n+// 3. Get average score for a particular subject for a student id\n+func (s student) avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n+\tvar sum int\n+\ti := 1\n+\tfor k, v := range Exams {\n+\t\tif k == idStd {\n+\t\t\tif v.subject == sbj {\n+\t\t\t\tsum = sum + v.grade\n+\t\t\t\ti++\n+\t\t\t}\n+\t\t}\n+\t}\n+\tif i == 0 {\n+\t\treturn 0, errors.New(\"exams found for this matter\")\n+\t}\n+\tavg = sum / i\n+\treturn avg, nil\n+}\n+\n+func main() {\n+\ts1 := student{1, \"Carl\"}\n+\ts2 := student{2, \"Janis\"}\n+\ts3 := student{3, \"Luise\"}\n+\ts4 := student{4, \"John\"}\n+\ts1.AddStudent(s1)\n+\ts2.AddStudent(s2)\n+\ts3.AddStudent(s3)\n+\ts3.AddStudent(s4)\n+\t_, err := s4.FindStudent(s4.id)\n+\tif err != nil {\n+\t\tfmt.Println(err.Error())\n+\t} else {\n+\t\tfmt.Println(s4.name, \"present in database\")\n+\t}\n+\ts4.DeleteStudent(s4.id)\n+\n+\tex1 := exam{\n+\t\tid:      1,            // exam number\n+\t\tidStd:   1,            // Carl\n+\t\tsubject: int(science), // science\n+\t\tgrade:   int(Good),    // good (4)\n+\t}\n+\tex4 := exam{4, 1, 1, 1} // exNr 4, Carl, math, low failure\n+\tex5 := exam{5, 1, 1, 3} // exNr 5, Carl, math, satisfactory\n+\tex6 := exam{6, 1, 0, 3} // exNr 5, Carl, english, satisfactory\n+\tex2 := exam{2, 2, 1, 5} // exNr 2, Janis, math, superior\n+\tex7 := exam{7, 2, 2, 4} // exNr 7, Janis, science, good\n+\tex8 := exam{8, 2, 2, 2} // exNr 8, Janis, science, low pass but certifying\n+\tex3 := exam{3, 3, 3, 6} // exNr 3, Luise, history, outstanding\n+\tex9 := exam{9, 3, 0, 2} // exNr 3, Luise, english, low pass but certifying\n+\n+\texams[ex1.id] = ex1\n+\texams[ex2.id] = ex2\n+\texams[ex3.id] = ex3\n+\texams[ex4.id] = ex4\n+\texams[ex5.id] = ex5\n+\texams[ex6.id] = ex6\n+\texams[ex7.id] = ex7\n+\texams[ex8.id] = ex8\n+\texams[ex9.id] = ex9\n+\tex1.extPrint()\n+\tgrd, _ := s1.avgGrade(1)\n+\tprt(\"the average of student\", Students[1], \" is \", grd) // Carl grades average = 2.75\n+\tprt(AvgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n+\tgrd, _ = AvgGrade(2)\n+\tprt(\"the average of student\", Students[2], \" is \", grd) // Carl grades average = 2.75\n+\tprt(AvgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n+}\n"
                }
            ],
            "date": 1689685830659,
            "name": "Commit-0",
            "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n)\n\nvar prt = fmt.Println\n\n/*\nWe will build a school grade treacking service\n\nConcepts and models to create in your program\n1. Create a student that will have an id ansum / i\n3. Delete student by ID\n\nFunctionalities for grades\n1. Add a grade for a student\n2. Get the average score across all subjects for a student id\n3. Get average score for a particular subject for a student id\n4. Get the subject with the lowest score for a student id\n5. Get the subject with the highest score for a student id\n6. Get all grades for a student id\n\n\nHint: You will have 2 maps in this exercise\n\n*/\n\n// 1. Create a student that will have an id and name as the fields - id is int and name is string\ntype student struct {\n\tid   int\n\tname string\n}\n\nvar students = map[int]student{}\n\nfunc studentExist(idStd int) (student, bool) {\n\tstudent, ok := students[idStd]\n\treturn student, ok\n}\n\nfunc addStudent(std student) bool {\n\t_, exist := studentExist(std.id)\n\tif exist {\n\t\tfmt.Println(\"The student\", std.name, \"is already present in db\")\n\t\treturn false\n\t}\n\tstudents[std.id] = std\n\tfmt.Println(\"The student\", std.name, \"wasn't present in db and now is correctly inserted\")\n\treturn true\n}\n\nfunc findStudent(idStd int) (student, error) {\n\tstd, exists := studentExist(idStd)\n\tif exists {\n\t\treturn std, nil\n\t}\n\treturn student{}, errors.New(\"the ID student \" + strconv.Itoa(idStd) + \" is not in the database\")\n}\n\nfunc deleteStudent(idStd int) {\n\t_, ok := studentExist(idStd)\n\tif ok {\n\t\tdelete(students, idStd)\n\t\tfmt.Println(\"student\", idStd, \"correctly deleted\")\n\t\treturn\n\t}\n\tfmt.Println(\"student non present, cannot delete it\")\n}\n\n// 2. Create constants for subjects such as english, math, science and history\ntype subject int\n\nvar subjects subject\n\nconst (\n\tenglish     subject = iota // 0\n\tmathematics                // 1\n\tscience                    // 2\n\thistory                    // 3\n)\n\nfunc (s subject) returnSbj(idSub int) string {\n\tswitch idSub {\n\tcase 0:\n\t\treturn \"english\"\n\tcase 1:\n\t\treturn \"math\"\n\tcase 2:\n\t\treturn \"science\"\n\tcase 3:\n\t\treturn \"history\"\n\tdefault:\n\t\treturn \"not found\"\n\t}\n\t// return [...]string{\"english\", \"math\", \"science\", \"history\"}\n}\n\n// 3. Create a grade struct that will hold a subject name string and an integer score denoting the 'marks'\ntype exam struct {\n\tid      int // exam number\n\tidStd   int // student id\n\tsubject int // exam subject\n\tgrade   int // exam grade\n}\n\nvar exams = map[int]exam{} // [int] is the exam number\n\n// A student can have grades for multiple subjects - so it is a one to many relation - grades will be kept in a list\ntype grade int\n\nvar grades grade\n\n// Here I decided to use the six-point system adopted by Phillips Academy at Andover.\nconst (\n\tFailure              grade = iota // 0\n\tLowFailure                        // 1\n\tLowPassButCertifying              // 2\n\tSatisfactory                      // 3\n\tGood                              // 4\n\tSuperiorHonor                     // 5\n\tOutstandingHighHonor              // 6\n)\n\n// func (g Grades) string() {\nfunc (g grade) returnGrade(idGrade int) string {\n\tswitch idGrade {\n\tcase 0:\n\t\treturn \"Failure\"\n\tcase 1:\n\t\treturn \"Low Failure\"\n\tcase 2:\n\t\treturn \"Low Pass, but certifying\"\n\tcase 3:\n\t\treturn \"Satisfactory\"\n\tcase 4:\n\t\treturn \"Good\"\n\tcase 5:\n\t\treturn \"Superior (Honor)\"\n\tcase 6:\n\t\treturn \"Outstanding (High Honor)\"\n\tdefault:\n\t\treturn \"not found\"\n\t}\n}\n\nfunc (e exam) extPrint() { //extended print\n\tprt(\"id exam:\", e.id)\n\tprt(\"student name:\", students[e.idStd].name)\n\tprt(\"subject:\", subjects.returnSbj(e.subject))\n\tprt(\"grade:\", grades.returnGrade(e.grade))\n}\n\n// 2. Get the average score across all subjects for a student id\nfunc avgGrade(idStd int) (avg int, err error) {\n\tvar sum int\n\ti := 1\n\tfor k := range exams {\n\t\tif k == idStd {\n\t\t\tsum = sum + exams[k].grade\n\t\t\ti++\n\t\t}\n\t}\n\tif i == 0 {\n\t\treturn 0, errors.New(\"exams found for this student\")\n\t}\n\tavg = int(math.Floor(float64(sum) / float64(i)))\n\treturn avg, nil\n}\n\n// 3. Get average score for a particular subject for a student id\nfunc avgGradeBySbj(idStd int, sbj int) (avg int, err error) {\n\tvar sum int\n\ti := 1\n\tfor k, v := range exams {\n\t\tif k == idStd {\n\t\t\tif v.subject == sbj {\n\t\t\t\tsum = sum + v.grade\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\t}\n\tif i == 0 {\n\t\treturn 0, errors.New(\"exams found for this matter\")\n\t}\n\tavg = sum / i\n\treturn avg, nil\n}\n\nfunc main() {\n\ts1 := student{1, \"Carl\"}\n\ts2 := student{2, \"Janis\"}\n\ts3 := student{3, \"Luise\"}\n\ts4 := student{4, \"John\"}\n\taddStudent(s1)\n\taddStudent(s2)\n\taddStudent(s3)\n\taddStudent(s4)\n\t_, err := findStudent(s4.id)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t} else {\n\t\tfmt.Println(s4.name, \"present in database\")\n\t}\n\tdeleteStudent(s4.id)\n\n\tex1 := exam{\n\t\tid:      1,            // exam number\n\t\tidStd:   1,            // Carl\n\t\tsubject: int(science), // science\n\t\tgrade:   int(Good),    // good (4)\n\t}\n\tex4 := exam{4, 1, 1, 1} // exNr 4, Carl, math, low failure\n\tex5 := exam{5, 1, 1, 3} // exNr 5, Carl, math, satisfactory\n\tex6 := exam{6, 1, 0, 3} // exNr 5, Carl, english, satisfactory\n\tex2 := exam{2, 2, 1, 5} // exNr 2, Janis, math, superior\n\tex7 := exam{7, 2, 2, 4} // exNr 7, Janis, science, good\n\tex8 := exam{8, 2, 2, 2} // exNr 8, Janis, science, low pass but certifying\n\tex3 := exam{3, 3, 3, 6} // exNr 3, Luise, history, outstanding\n\tex9 := exam{9, 3, 0, 2} // exNr 3, Luise, english, low pass but certifying\n\n\texams[ex1.id] = ex1\n\texams[ex2.id] = ex2\n\texams[ex3.id] = ex3\n\texams[ex4.id] = ex4\n\texams[ex5.id] = ex5\n\texams[ex6.id] = ex6\n\texams[ex7.id] = ex7\n\texams[ex8.id] = ex8\n\texams[ex9.id] = ex9\n\tex1.extPrint()\n\tgrd, _ := avgGrade(1)\n\tprt(\"the average of student\", students[1], \" is \", grd) // Carl grades average = 2.75\n\tprt(avgGradeBySbj(1, 1))                                // Carl grades average for math = 2\n\tgrd, _ = avgGrade(2)\n\tprt(\"the average of student\", students[2], \" is \", grd) // Carl grades average = 2.75\n\tprt(avgGradeBySbj(2, 1))                                // Janis grades average for math = 2\n}\n"
        }
    ]
}