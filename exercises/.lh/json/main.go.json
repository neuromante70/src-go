{
    "sourceFile": "json/main.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1689700933133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689700940370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", opCalc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", opCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", opCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", opCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", opCalc.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689700947061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", opCalc.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", opCalc.Mult(22, 33)) // 726\n+\tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n+\tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", opCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", opCalc.Divide(12, 6)) // 2\n \tprt()\n \t_ = opCalc.EncodeHistory()\n"
                },
                {
                    "date": 1689700952456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,13 @@\n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", opCalc.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", opCalc.Divide(12, 6)) // 2\n+\tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n \tprt()\n-\t_ = opCalc.EncodeHistory()\n-\topCalc.SaveToFile(opCalc.EncodeHistory(), \"test.json\")\n+\t_ = MyCalc.EncodeHistory()\n+\tMyCalc.SaveToFile(opCalc.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \topCalc.SaveToFile(History2, \"test2.json\")\n \topCalc.DecodeHistory(\"test2.json\")\n"
                },
                {
                    "date": 1689700957860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+/*\n+Json allows us to serialize our data to use somewhere else\n+Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n+\n+In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n+\n+You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n+\n+1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n+\n+2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n+\n+3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n+\n+so something like this\n+\n+json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n+func (c calculator) encodeHistory() []string {\n+    for _, mr := range c.history {\n+    }\n+}\n+4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n+\n+json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n+*/\n+\n+package main\n+\n+import (\n+\tcalc \"BASICS/exercises/json/calculator\"\n+\t\"fmt\"\n+)\n+\n+var prt = fmt.Println\n+\n+func main() {\n+\t// opCalc := calc.Calculator{}\n+\n+\tprt(\"calculation with Calculator:\")\n+\tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n+\tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n+\tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n+\tprt()\n+\t_ = MyCalc.EncodeHistory()\n+\tMyCalc.SaveToFile(MyCalc.EncodeHistory(), \"test.json\")\n+\t// opCalc.DecodeHistory()\n+\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n+\tMyCalc.SaveToFile(History2, \"test2.json\")\n+\tMyCalc.DecodeHistory(\"test2.json\")\n+\tMyCalc.AddToHistory(\"test2.json\")\n+\topCalc.PrintHistory()\n+}\n"
                },
                {
                    "date": 1689700977210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", caMyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n@@ -49,60 +49,6 @@\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tMyCalc.SaveToFile(History2, \"test2.json\")\n \tMyCalc.DecodeHistory(\"test2.json\")\n \tMyCalc.AddToHistory(\"test2.json\")\n-\topCalc.PrintHistory()\n+\tMyCalc.PrintHistory()\n }\n-/*\n-Json allows us to serialize our data to use somewhere else\n-Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n-\n-In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n-\n-You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n-\n-1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n-\n-2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n-\n-3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n-\n-so something like this\n-\n-json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n-func (c calculator) encodeHistory() []string {\n-    for _, mr := range c.history {\n-    }\n-}\n-4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n-\n-json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n-*/\n-\n-package main\n-\n-import (\n-\tcalc \"BASICS/exercises/json/calculator\"\n-\t\"fmt\"\n-)\n-\n-var prt = fmt.Println\n-\n-func main() {\n-\t// opCalc := calc.Calculator{}\n-\n-\tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", MyCalc.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n-\tprt()\n-\t_ = MyCalc.EncodeHistory()\n-\tMyCalc.SaveToFile(opCalc.EncodeHistory(), \"test.json\")\n-\t// opCalc.DecodeHistory()\n-\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\topCalc.SaveToFile(History2, \"test2.json\")\n-\topCalc.DecodeHistory(\"test2.json\")\n-\topCalc.AddToHistory(\"test2.json\")\n-\topCalc.PrintHistory()\n-}\n"
                },
                {
                    "date": 1689700994124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n package main\n \n import (\n \tcalc \"BASICS/exercises/json/calculator\"\n+\t\"calculator\"\n \t\"fmt\"\n )\n \n var prt = fmt.Println\n@@ -36,9 +37,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", caMyCalc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689701009369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.calculator.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", MyCalc.Sub(5, 9))      // -4\n+\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n+\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n \tprt()\n"
                },
                {
                    "date": 1689701015337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,14 +39,14 @@\n \n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", MyCalc.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", MyCalc.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", MyCalc.Divide(12, 6)) // 2\n+\tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n-\t_ = MyCalc.EncodeHistory()\n-\tMyCalc.SaveToFile(MyCalc.EncodeHistory(), \"test.json\")\n+\t_ = calc.Calculator.EncodeHistory()\n+\tcalc.Calculator.SaveToFile(MyCalc.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tMyCalc.SaveToFile(History2, \"test2.json\")\n \tMyCalc.DecodeHistory(\"test2.json\")\n"
                },
                {
                    "date": 1689701020682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n \t_ = calc.Calculator.EncodeHistory()\n-\tcalc.Calculator.SaveToFile(MyCalc.EncodeHistory(), \"test.json\")\n+\tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\tMyCalc.SaveToFile(History2, \"test2.json\")\n-\tMyCalc.DecodeHistory(\"test2.json\")\n-\tMyCalc.AddToHistory(\"test2.json\")\n+\tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n+\tcalc.Calculator.DecodeHistory(\"test2.json\")\n+\tcalc.Calculator.AddToHistory(\"test2.json\")\n \tMyCalc.PrintHistory()\n }\n"
                },
                {
                    "date": 1689701075023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n package main\n \n import (\n \tcalc \"BASICS/exercises/json/calculator\"\n-\t\"calculator\"\n \t\"fmt\"\n )\n \n var prt = fmt.Println\n@@ -37,9 +36,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc. .Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n@@ -50,6 +49,6 @@\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n \tcalc.Calculator.DecodeHistory(\"test2.json\")\n \tcalc.Calculator.AddToHistory(\"test2.json\")\n-\tMyCalc.PrintHistory()\n+\tcalc.Calculator.PrintHistory()\n }\n"
                },
                {
                    "date": 1689701082684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc. .Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.MyCalc.Add() .Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689701087749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n func main() {\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.MyCalc.Add() .Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689701098509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \t// opCalc := calc.Calculator{}\n \n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n+\tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n"
                },
                {
                    "date": 1689701106169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n \n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n+\tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n \tprt()\n \t_ = calc.Calculator.EncodeHistory()\n \tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n"
                },
                {
                    "date": 1689701111787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n \tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n \tprt()\n-\t_ = calc.Calculator.EncodeHistory()\n-\tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n+\t_ = calc.MyCalc.EncodeHistory()\n+\tcalc.MyCalc.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n \tcalc.Calculator.DecodeHistory(\"test2.json\")\n"
                },
                {
                    "date": 1689701117143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n \tprt()\n \t_ = calc.MyCalc.EncodeHistory()\n-\tcalc.MyCalc.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n+\tcalc.MyCalc.SaveToFile(calc.MyCalc.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n \tcalc.Calculator.DecodeHistory(\"test2.json\")\n"
                },
                {
                    "date": 1689701123450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \t_ = calc.MyCalc.EncodeHistory()\n \tcalc.MyCalc.SaveToFile(calc.MyCalc.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n-\tcalc.Calculator.DecodeHistory(\"test2.json\")\n+\tcalc.MyCalc.SaveToFile(History2, \"test2.json\")\n+\tcalc.MyCalc.DecodeHistory(\"test2.json\")\n \tcalc.Calculator.AddToHistory(\"test2.json\")\n \tcalc.Calculator.PrintHistory()\n }\n"
                },
                {
                    "date": 1689701129331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,7 +48,7 @@\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n \tcalc.MyCalc.SaveToFile(History2, \"test2.json\")\n \tcalc.MyCalc.DecodeHistory(\"test2.json\")\n-\tcalc.Calculator.AddToHistory(\"test2.json\")\n-\tcalc.Calculator.PrintHistory()\n+\tcalc.MyCalc.AddToHistory(\"test2.json\")\n+\tcalc.MyCalc.PrintHistory()\n }\n"
                },
                {
                    "date": 1689701908869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,8 @@\n \n var prt = fmt.Println\n \n func main() {\n-\t// opCalc := calc.Calculator{}\n-\n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n"
                },
                {
                    "date": 1689748214480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.c.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689748220350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+/*\n+Json allows us to serialize our data to use somewhere else\n+Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n+\n+In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n+\n+You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n+\n+1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n+\n+2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n+\n+3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n+\n+so something like this\n+\n+json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n+func (c calculator) encodeHistory() []string {\n+    for _, mr := range c.history {\n+    }\n+}\n+4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n+\n+json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n+*/\n+\n+package main\n+\n+import (\n+\tcalc \"BASICS/exercises/json/calculator\"\n+\t\"fmt\"\n+)\n+\n+var prt = fmt.Println\n+\n+func main() {\n+\tprt(\"calculation with Calculator:\")\n+\tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n+\tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n+\tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n+\tprt()\n+\t_ = calc.MyCalc.EncodeHistory()\n+\tcalc.MyCalc.SaveToFile(calc.MyCalc.EncodeHistory(), \"test.json\")\n+\t// opCalc.DecodeHistory()\n+\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n+\tcalc.MyCalc.SaveToFile(History2, \"test2.json\")\n+\tcalc.MyCalc.DecodeHistory(\"test2.json\")\n+\tcalc.MyCalc.AddToHistory(\"test2.json\")\n+\tcalc.MyCalc.PrintHistory()\n+}\n"
                },
                {
                    "date": 1689748354688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.MyCalc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n@@ -49,56 +49,4 @@\n \tcalc.MyCalc.DecodeHistory(\"test2.json\")\n \tcalc.MyCalc.AddToHistory(\"test2.json\")\n \tcalc.MyCalc.PrintHistory()\n }\n-/*\n-Json allows us to serialize our data to use somewhere else\n-Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n-\n-In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n-\n-You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n-\n-1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n-\n-2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n-\n-3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n-\n-so something like this\n-\n-json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n-func (c calculator) encodeHistory() []string {\n-    for _, mr := range c.history {\n-    }\n-}\n-4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n-\n-json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n-*/\n-\n-package main\n-\n-import (\n-\tcalc \"BASICS/exercises/json/calculator\"\n-\t\"fmt\"\n-)\n-\n-var prt = fmt.Println\n-\n-func main() {\n-\tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.c.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n-\tprt()\n-\t_ = calc.MyCalc.EncodeHistory()\n-\tcalc.MyCalc.SaveToFile(calc.MyCalc.EncodeHistory(), \"test.json\")\n-\t// opCalc.DecodeHistory()\n-\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\tcalc.MyCalc.SaveToFile(History2, \"test2.json\")\n-\tcalc.MyCalc.DecodeHistory(\"test2.json\")\n-\tcalc.MyCalc.AddToHistory(\"test2.json\")\n-\tcalc.MyCalc.PrintHistory()\n-}\n"
                },
                {
                    "date": 1689748361282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689748383678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,18 +35,18 @@\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", calc.MyCalc.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", calc.MyCalc.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", calc.MyCalc.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", calc.MyCalc.Divide(12, 6)) // 2\n+\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n+\tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n-\t_ = calc.MyCalc.EncodeHistory()\n-\tcalc.MyCalc.SaveToFile(calc.MyCalc.EncodeHistory(), \"test.json\")\n+\t_ = calc.Calculator.EncodeHistory()\n+\tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n \t// opCalc.DecodeHistory()\n \tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\tcalc.MyCalc.SaveToFile(History2, \"test2.json\")\n-\tcalc.MyCalc.DecodeHistory(\"test2.json\")\n-\tcalc.MyCalc.AddToHistory(\"test2.json\")\n-\tcalc.MyCalc.PrintHistory()\n+\tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n+\tcalc.Calculator.DecodeHistory(\"test2.json\")\n+\tcalc.Calculator.AddToHistory(\"test2.json\")\n+\tcalc.Calculator.PrintHistory()\n }\n"
                },
                {
                    "date": 1689748572320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.Calculator.Add(calc.Calculator,5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689748583988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.Calculator.Add(calc.Calculator,5, 3))      // 8\n+\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689749320873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calc.Calculator.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\",  calc.Calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689749325940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,17 @@\n package main\n \n import (\n \tcalc \"BASICS/exercises/json/calculator\"\n+\t\"calculator\"\n \t\"fmt\"\n )\n \n var prt = fmt.Println\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\",  calc.Calculator.Add(5, 3))      // 8\n+\tprt(\"5 + 3 =\", calculator calc.Calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n"
                },
                {
                    "date": 1689749332689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+/*\n+Json allows us to serialize our data to use somewhere else\n+Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n+\n+In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n+\n+You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n+\n+1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n+\n+2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n+\n+3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n+\n+so something like this\n+\n+json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n+func (c calculator) encodeHistory() []string {\n+    for _, mr := range c.history {\n+    }\n+}\n+4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n+\n+json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n+*/\n+\n+package main\n+\n+import (\n+\tcalc \"BASICS/exercises/json/calculator\"\n+\t\"calculator\"\n+\t\"fmt\"\n+)\n+\n+var prt = fmt.Println\n+\n+func main() {\n+\tprt(\"calculation with Calculator:\")\n+\tprt(\"5 + 3 =\", calculator.Add(5, 3))      // 8\n+\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n+\tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n+\tprt()\n+\t_ = calc.Calculator.EncodeHistory()\n+\tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n+\t// opCalc.DecodeHistory()\n+\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n+\tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n+\tcalc.Calculator.DecodeHistory(\"test2.json\")\n+\tcalc.Calculator.AddToHistory(\"test2.json\")\n+\tcalc.Calculator.PrintHistory()\n+}\n"
                },
                {
                    "date": 1689749344619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n func main() {\n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calculator.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n+\tprt(\"5 - 9 =\", calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n \tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n@@ -50,57 +50,4 @@\n \tcalc.Calculator.DecodeHistory(\"test2.json\")\n \tcalc.Calculator.AddToHistory(\"test2.json\")\n \tcalc.Calculator.PrintHistory()\n }\n-/*\n-Json allows us to serialize our data to use somewhere else\n-Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n-\n-In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n-\n-You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n-\n-1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n-\n-2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n-\n-3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n-\n-so something like this\n-\n-json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n-func (c calculator) encodeHistory() []string {\n-    for _, mr := range c.history {\n-    }\n-}\n-4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n-\n-json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n-*/\n-\n-package main\n-\n-import (\n-\tcalc \"BASICS/exercises/json/calculator\"\n-\t\"calculator\"\n-\t\"fmt\"\n-)\n-\n-var prt = fmt.Println\n-\n-func main() {\n-\tprt(\"calculation with Calculator:\")\n-\tprt(\"5 + 3 =\", calculator calc.Calculator.Add(5, 3))      // 8\n-\tprt(\"5 - 9 =\", calc.Calculator.Sub(5, 9))      // -4\n-\tprt(\"22 * 33 =\", calc.Calculator.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n-\tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n-\tprt()\n-\t_ = calc.Calculator.EncodeHistory()\n-\tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n-\t// opCalc.DecodeHistory()\n-\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n-\tcalc.Calculator.SaveToFile(History2, \"test2.json\")\n-\tcalc.Calculator.DecodeHistory(\"test2.json\")\n-\tcalc.Calculator.AddToHistory(\"test2.json\")\n-\tcalc.Calculator.PrintHistory()\n-}\n"
                },
                {
                    "date": 1689749351416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \tprt(\"calculation with Calculator:\")\n \tprt(\"5 + 3 =\", calculator.Add(5, 3))      // 8\n \tprt(\"5 - 9 =\", calculator.Sub(5, 9))      // -4\n \tprt(\"22 * 33 =\", calculator.Mult(22, 33)) // 726\n-\tprt(\"4 / 0 =\", calc.Calculator.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"4 / 0 =\", calculator.Divide(4, 0))   // impossible to divide by zero\n \tprt(\"12 / 6 =\", calc.Calculator.Divide(12, 6)) // 2\n \tprt()\n \t_ = calc.Calculator.EncodeHistory()\n \tcalc.Calculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n"
                },
                {
                    "date": 1689749460090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+/*\n+Json allows us to serialize our data to use somewhere else\n+Serialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n+\n+In this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n+\n+You might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n+\n+1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n+\n+2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n+\n+3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n+\n+so something like this\n+\n+json.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\n+func (c calculator) encodeHistory() []string {\n+    for _, mr := range c.history {\n+    }\n+}\n+4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n+\n+json.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n+*/\n+\n+package main\n+\n+import (\n+\tcalc \"BASICS/exercises/json/calculator\"\n+\t\"calculator\"\n+\t\"fmt\"\n+)\n+\n+var prt = fmt.Println\n+\n+func main() {\n+\tprt(\"calculation with Calculator:\")\n+\tprt(\"5 + 3 =\", calculator.Add(5, 3))      // 8\n+\t// prt(\"5 - 9 =\", calculator.Sub(5, 9))      // -4\n+\tprt(\"5 - 9 =\", \n+\tprt(\"22 * 33 =\", calculator.Mult(22, 33)) // 726\n+\tprt(\"4 / 0 =\", calculator.Divide(4, 0))   // impossible to divide by zero\n+\tprt(\"12 / 6 =\", calculator.Divide(12, 6)) // 2\n+\tprt()\n+\t_ = calculator.EncodeHistory()\n+\tcalculator.SaveToFile(calc.Calculator.EncodeHistory(), \"test.json\")\n+\t// opCalc.DecodeHistory()\n+\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n+\tcalculator.SaveToFile(History2, \"test2.json\")\n+\tcalculator.DecodeHistory(\"test2.json\")\n+\tcalculator.AddToHistory(\"test2.json\")\n+\tcalculator.PrintHistory()\n+}\n"
                }
            ],
            "date": 1689700933133,
            "name": "Commit-0",
            "content": "/*\nJson allows us to serialize our data to use somewhere else\nSerialization is also how we can 'save' our work to be used later - think saving in games and then reloading it so you dont have to start from the start\n\nIn this exercise we will take CalculatorA from the last exercise with the add, mult, divide, and sub functions and add some new functionality to it\n\nYou might have noticed that calculators also have some semblance of history of the operations performed - so that is what we will add\n\n1. Create a MathRequest struct - this will have two integers and an operation string - this is how we will model all the add/mult/sub/divide requests that come into the calculator. So an add function call will create a math request where the two ints are the two inputs and the operation is \"add\"\n\n2. In the CalculatorA struct create a slice of math requests named history - this is where we will append all math requests that are created in the different functions - so this will be our list of history\n\n3. create an encodeHistory function this will loop over all the mathRequests in the history slice inside the calculatorA struct and convert all of them into json strings and return a list of strings. You can access the history inside the struct if the function is a receiver using the dot syntax\n\nso something like this\n\njson.Marshal is how you convert a struct into a []byte - and then you can convert []byte into string\nfunc (c calculator) encodeHistory() []string {\n    for _, mr := range c.history {\n    }\n}\n4. create a decodeHistory function that will take in a list of json strings as input and convert them into mathRequests and save them as the history inside the calculator slice . At the start of this function clear out whatever was in the slice previously\n\njson.Unmarshal is how you convert a []byte json into a struct passed in as a pointer\n*/\n\npackage main\n\nimport (\n\tcalc \"BASICS/exercises/json/calculator\"\n\t\"fmt\"\n)\n\nvar prt = fmt.Println\n\nfunc main() {\n\t// opCalc := calc.Calculator{}\n\n\tprt(\"calculation with Calculator:\")\n\tprt(\"5 + 3 =\", opCalc.Add(5, 3))      // 8\n\tprt(\"5 - 9 =\", opCalc.Sub(5, 9))      // -4\n\tprt(\"22 * 33 =\", opCalc.Mult(22, 33)) // 726\n\tprt(\"4 / 0 =\", opCalc.Divide(4, 0))   // impossible to divide by zero\n\tprt(\"12 / 6 =\", opCalc.Divide(12, 6)) // 2\n\tprt()\n\t_ = opCalc.EncodeHistory()\n\topCalc.SaveToFile(opCalc.EncodeHistory(), \"test.json\")\n\t// opCalc.DecodeHistory()\n\tHistory2 := []byte(`[{\"Num1\":6,\"Operator\":\"Add\",\"Num2\":8},{\"Num1\":2,\"Operator\":\"Sub\",\"Num2\":7},{\"Num1\":8,\"Operator\":\"Mult\",\"Num2\":8},{\"Num1\":33,\"Operator\":\"Div\",\"Num2\":11}]`)\n\topCalc.SaveToFile(History2, \"test2.json\")\n\topCalc.DecodeHistory(\"test2.json\")\n\topCalc.AddToHistory(\"test2.json\")\n\topCalc.PrintHistory()\n}\n"
        }
    ]
}