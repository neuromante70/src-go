{
    "sourceFile": "BASICS/exercises/structEx.go",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1687198065042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687198070367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,5 +2,7 @@\n \n import (\n \t\"errors\"\n \t\"fmt\"\n-)\n\\ No newline at end of file\n+)\n+\n+func main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198108733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n package main\n \n+\n+\n import (\n \t\"errors\"\n \t\"fmt\"\n )\n\\ No newline at end of file\n \n-func main()\n+func main() {\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198116719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n package main\n \n-\n-\n import (\n \t\"errors\"\n \t\"fmt\"\n )\n+?**\n \n+\n func main() {\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198123186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,12 @@\n import (\n \t\"errors\"\n \t\"fmt\"\n )\n-?**\n+/*\n \n+*/\n \n+\n func main() {\n \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198130283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,17 @@\n \t\"errors\"\n \t\"fmt\"\n )\n /*\n+1. The program has a concept [struct] of a User with an id, name, and email - id is int and name/email are strings\n \n+2. There should be a hashmap - that has key of type int which will be the user ID and the value will be the user object itself - make this hashmap outside of main so all function can access it\n+\n+3. There should be 4 functions\n+  3a. An add function that takes in as an argument a user object and adds it to the hashmap - [bonus return true if the user did not exist before and false if the user was already present]\n+  3b. A get function that takes in a user id and returns the user from the hashmap IF exists - if not return an error\n+  3c. A delete function that takes in a user id and deletes that user from the hashmap\n+  3d. An export function that returns all the users saved in the hashmap as a slice/array\n */\n \n \n func main() {\n"
                },
                {
                    "date": 1687198140391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n */\n \n \n func main() {\n-\n+\t\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198145724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n */\n \n \n func main() {\n-\t\n+\t_ = err\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198151154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n */\n \n \n func main() {\n-\t_ = err\n+\t_ = errors.New()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198156586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,6 @@\n */\n \n \n func main() {\n-\t_ = errors.New()\n+\t_ = errors.New(\"fai cacare il cazzo\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198161658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,5 +18,6 @@\n \n \n func main() {\n \t_ = errors.New(\"fai cacare il cazzo\")\n+\tfmt.Println()\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198168154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,6 +18,6 @@\n \n \n func main() {\n \t_ = errors.New(\"fai cacare il cazzo\")\n-\tfmt.Println()\n+\tfmt.Println(\"fai schifo al cazzo\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198274465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n   3c. A delete function that takes in a user id and deletes that user from the hashmap\n   3d. An export function that returns all the users saved in the hashmap as a slice/array\n */\n \n+Â·\n \n-\n func main() {\n \t_ = errors.New(\"fai cacare il cazzo\")\n \tfmt.Println(\"fai schifo al cazzo\")\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1687198307649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+package main\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+)\n+/*\n+1. The program has a concept [struct] of a User with an id, name, and email - id is int and name/email are strings\n+\n+2. There should be a hashmap - that has key of type int which will be the user ID and the value will be the user object itself - make this hashmap outside of main so all function can access it\n+\n+3. There should be 4 functions\n+  3a. An add function that takes in as an argument a user object and adds it to the hashmap - [bonus return true if the user did not exist before and false if the user was already present]\n+  3b. A get function that takes in a user id and returns the user from the hashmap IF exists - if not return an error\n+  3c. A delete function that takes in a user id and deletes that user from the hashmap\n+  3d. An export function that returns all the users saved in the hashmap as a slice/array\n+*/\n+\n+type user struct{\n+\tID\n+}\n+\n+func main() {\n+\t_ = errors.New(\"fai cacare il cazzo\")\n+\tfmt.Println(\"fai schifo al cazzo\")\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1687198065042,
            "name": "Commit-0",
            "content": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)"
        }
    ]
}